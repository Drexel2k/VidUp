<Fluent:RibbonWindow x:Class="Drexel.VidUp.UI.MainWindow"
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:Fluent="urn:fluent-ribbon"
                     xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                     Title="{Binding AppTitle}"
                     Top="{Binding WindowTop, Mode=TwoWay, Delay=500}"
                     Left="{Binding WindowLeft, Mode=TwoWay, Delay=500}"
                     Width="{Binding WindowWidth, Mode=TwoWay, Delay=500}" 
                     Height="{Binding WindowHeight, Mode=TwoWay, Delay=500}"
                     xmlns:vm="clr-namespace:Drexel.VidUp.UI.ViewModels"
                     xmlns:controls="clr-namespace:Drexel.VidUp.UI.Controls"
                     xmlns:converters="clr-namespace:Drexel.VidUp.UI.Converters"
                     xmlns:local="clr-namespace:Drexel.VidUp.UI"
                     xmlns:system="clr-namespace:System;assembly=mscorlib"
                     x:Name="CMainWindow"
                     Icon="images/vidup.ico" Closed="closed">
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo ProgressValue="{Binding Mode=OneWay, Path=TotalProgressPercentage}" ProgressState="{Binding Mode=OneWay, Path=TaskbarItemProgressState}" />
    </Window.TaskbarItemInfo>

    <Window.DataContext>
        <vm:MainWindowViewModel />
    </Window.DataContext>
    <Window.Resources>
        <DataTemplate DataType="{x:Type vm:UploadListViewModel}">
            <controls:UploadListControl />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:TemplateViewModel}">
            <controls:TemplateControl />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:PlaylistViewModel}">
            <controls:PlaylistControl />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:VidUpViewModel}"  />
        <DataTemplate DataType="{x:Type vm:SettingsViewModel}">
            <controls:SettingsControl />
        </DataTemplate>

        <!-- booleans for command paramters-->
        <system:Boolean x:Key="FalseValue">False</system:Boolean>
        <system:Boolean x:Key="TrueValue">True</system:Boolean>
    </Window.Resources>

    <materialDesign:DialogHost Identifier="RootDialog">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Fluent:Ribbon VerticalAlignment="Center" SelectedTabIndex="{Binding TabNo, Mode=TwoWay}">
                <!--Tabs-->
                <Fluent:RibbonTabItem DataContext="{Binding ViewModels[0]}" Header="Upload" >
                    <Fluent:RibbonGroupBox Header="Add Uploads">
                        <Fluent:Button Header="Add Files" SizeDefinition="Middle,Middle,Small"  Icon="{materialDesign:PackIcon FilePlus}" Command="{Binding AddUploadCommand}" />
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Drag&amp;Drop Files Here">
                        <Image Source="images/dragdrop.png" Drop="fileDrop" AllowDrop="True" />
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Upload">
                        <Fluent:Button Header="Start Upload" SizeDefinition="Middle,Middle,Small" Icon="{materialDesign:PackIcon UploadMultiple}"  Command="{Binding StartUploadingCommand}" />
                        <StackPanel Orientation="Horizontal">
                            <Fluent:CheckBox Margin="3 0 3 0" IsChecked="{Binding ResumeUploads}">
                                <TextBlock Margin="0 4 0 0">Resume Uploads</TextBlock>
                            </Fluent:CheckBox>
                            <materialDesign:PackIcon Kind="HelpCircleOutline" VerticalAlignment="Bottom" Margin="0 5 10 5" ToolTip="Try to resume failed and stopped uploads. If upload resuming fails permanently, reset state of the upload." ToolTipService.ShowDuration="60000" Background="Transparent" />
                        </StackPanel>
                        <Fluent:Button Header="Stop Uploading" SizeDefinition="Middle,Middle,Small" Icon="{materialDesign:PackIcon Stop}"  Command="{Binding StopUploadingCommand}" />
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Recalculate Publish At Dates">

                        <Fluent:Button Header="Recalculate Uploads with:" SizeDefinition="Middle,Middle,Small"  Icon="{materialDesign:PackIcon Calendar}" Command="{Binding RecalculatePublishAtCommand}" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="22" />
                                <RowDefinition Height="22" />
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5 2 0 0">Template:</TextBlock>
                            <Fluent:ComboBox Grid.Row="0" Grid.Column="1" IsEditable="False" VerticalAlignment="Bottom"  ItemsSource="{Binding ObservableTemplateViewModelsInclAll}" SelectedItem="{Binding RecalculatePublishAtSelectedTemplate}" Width="150" Grid.ColumnSpan="2">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding NameWithYoutubeAccountName}"></TextBlock>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                                <ComboBox.ItemContainerStyle>
                                    <Style TargetType="ComboBoxItem">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Visible}" Value="false">
                                                <Setter Property="Visibility" Value="Collapsed"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ComboBox.ItemContainerStyle>
                            </Fluent:ComboBox>
                            <TextBlock Grid.Row="1" Grid.Column="0" Margin="5 2 0 0">Start Date:</TextBlock>
                            <Button Grid.Row="1" Grid.Column="1" Command="{Binding ResetRecalculatePublishAtStartDateCommand }"  Style="{StaticResource MaterialDesignRaisedLightButton}" HorizontalAlignment="Left" VerticalAlignment="Top"  Margin="10 5 2 0" Width="12" Height="12"  Padding="0" VerticalContentAlignment="Top" BorderThickness="0" ToolTip="Clear value." ToolTipService.ShowDuration="60000" >
                                <Image Source="../Images/minus.png" />
                            </Button>
                            <DatePicker Grid.Row="1"  Grid.Column="1" Width="125" materialDesign:HintAssist.Hint="Pick Date" Style="{StaticResource MaterialDesignDatePicker}" SelectedDate="{Binding RecalculatePublishAtStartDate}" DisplayDateStart="{Binding RecalculatePublishAtFirstDate, Mode=OneWay}" HorizontalAlignment="Right">
                                <DatePicker.Resources>
                                    <Style x:Key="MaterialDesignDatePickerTextBox"
                                           TargetType="DatePickerTextBox"
                                           BasedOn="{StaticResource MaterialDesignDatePickerTextBox}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </Style>
                                </DatePicker.Resources>
                            </DatePicker>
                        </Grid>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Remove Uploads">
                        <!-- CommandParamter is to enable testing -->
                        <Fluent:Button Header="Delete Uploads with:" SizeDefinition="Middle,Middle,Small"  Icon="{materialDesign:PackIcon FileRemove}" Command="{Binding DeleteUploadsCommand}" CommandParameter="{StaticResource FalseValue}" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="22" />
                                <RowDefinition Height="22" />
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5 2 0 0">Status:</TextBlock>
                            <Fluent:ComboBox Grid.Row="0" Grid.Column="1" IsEditable="False" VerticalAlignment="Bottom"  ItemsSource="{Binding StatusesInclAll}" SelectedItem="{Binding DeleteSelectedUploadStatus}" Width="150">
                                <Fluent:ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Converter={converters:UplStatusStringValuesConverter}}"/>
                                    </DataTemplate>
                                </Fluent:ComboBox.ItemTemplate>
                            </Fluent:ComboBox>
                            <TextBlock Grid.Row="1" Grid.Column="0" Margin="5 2 0 0">Template:</TextBlock>
                            <Fluent:ComboBox Grid.Row="1" Grid.Column="1" IsEditable="False" VerticalAlignment="Bottom"  ItemsSource="{Binding ObservableTemplateViewModelsInclAllNone}" SelectedItem="{Binding DeleteSelectedTemplate}" Width="150">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding NameWithYoutubeAccountName}"></TextBlock>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                                <ComboBox.ItemContainerStyle>
                                    <Style TargetType="ComboBoxItem">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Visible}" Value="false">
                                                <Setter Property="Visibility" Value="Collapsed"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ComboBox.ItemContainerStyle>
                            </Fluent:ComboBox>
                        </Grid>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Reset Upload Status">
                        <!-- CommandParamter is to enable testing -->
                        <StackPanel Orientation="Horizontal">
                            <Fluent:Button Header="Reset Uploads to:" SizeDefinition="Middle,Middle,Small"  Icon="{materialDesign:PackIcon BackupRestore}" Command="{Binding ResetUploadsCommand}" CommandParameter="{StaticResource FalseValue}" />
                        <Fluent:ComboBox IsEditable="False" VerticalAlignment="Bottom"  ItemsSource="{Binding ResetToUploadStatuses}" SelectedItem="{Binding ResetToSelectedUploadStatus}" Width="150">
                            <Fluent:ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={converters:UplStatusStringValuesConverter}}"/>
                                </DataTemplate>
                            </Fluent:ComboBox.ItemTemplate>
                        </Fluent:ComboBox>
                        </StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="22" />
                                <RowDefinition Height="22" />
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5 2 0 0">With Status:</TextBlock>
                            <Fluent:ComboBox Grid.Row="0" Grid.Column="1" IsEditable="False" VerticalAlignment="Bottom"  ItemsSource="{Binding StatusesInclAll}" SelectedItem="{Binding ResetWithSelectedUploadStatus}" Width="150">
                                <Fluent:ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Converter={converters:UplStatusStringValuesConverter}}"/>
                                    </DataTemplate>
                                </Fluent:ComboBox.ItemTemplate>
                            </Fluent:ComboBox>
                            <TextBlock Grid.Row="1" Grid.Column="0" Margin="5 2 0 0">With Template:</TextBlock>
                            <Fluent:ComboBox Grid.Row="1" Grid.Column="1" IsEditable="False" VerticalAlignment="Bottom"  ItemsSource="{Binding ObservableTemplateViewModelsInclAllNone}" SelectedItem="{Binding ResetWithSelectedTemplate}" Width="150">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding NameWithYoutubeAccountName}"></TextBlock>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                                <ComboBox.ItemContainerStyle>
                                    <Style TargetType="ComboBoxItem">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Visible}" Value="false">
                                                <Setter Property="Visibility" Value="Collapsed"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ComboBox.ItemContainerStyle>
                            </Fluent:ComboBox>
                        </Grid>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Reset To Template Values">
                        <!-- CommandParameter is to enable testing -->
                        <StackPanel Orientation="Horizontal">
                            <Fluent:Button Header="Reset Attribute: " SizeDefinition="Middle,Middle,Small"  Icon="{materialDesign:PackIcon FileRestore}" Command="{Binding ResetAttributeCommand}" />
                            <Fluent:ComboBox IsEditable="False" VerticalAlignment="Bottom"  ItemsSource="{Binding ResetAttributeAttributes}" SelectedItem="{Binding ResetAttributeSelectedAttribute}" Width="150">
                                <Fluent:ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Converter={converters:EnumConverter}}"/>
                                    </DataTemplate>
                                </Fluent:ComboBox.ItemTemplate>
                            </Fluent:ComboBox>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Margin="5 2 0 0" Width="106">With Template:</TextBlock>
                            <Fluent:ComboBox IsEditable="False" VerticalAlignment="Bottom"  ItemsSource="{Binding ObservableTemplateViewModelsInclAllNone}" SelectedItem="{Binding ResetAttributeSelectedTemplate}" Width="150">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding NameWithYoutubeAccountName}"></TextBlock>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                                <ComboBox.ItemContainerStyle>
                                    <Style TargetType="ComboBoxItem">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Visible}" Value="false">
                                                <Setter Property="Visibility" Value="Collapsed"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ComboBox.ItemContainerStyle>
                            </Fluent:ComboBox>
                        </StackPanel>
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
                <Fluent:RibbonTabItem DataContext="{Binding ViewModels[1]}" Header="Templates" >
                    <Fluent:RibbonGroupBox Header="Manage" VerticalContentAlignment="Bottom">
                        <Fluent:ComboBox VerticalAlignment="Bottom" Icon="images/file-document-box-edit.png" ItemsSource="{Binding ObservableTemplateViewModels}" SelectedItem="{Binding SelectedTemplate}" IsEditable="False">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding NameWithYoutubeAccountName}"></TextBlock>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="ComboBoxItem">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Visible}" Value="false">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ComboBox.ItemContainerStyle>
                        </Fluent:ComboBox>
                        <Fluent:Button Header="New Template" SizeDefinition="Middle,Middle,Small" Icon="{materialDesign:PackIcon TextBoxPlus}" Command="{Binding NewTemplateCommand}" />
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
                <Fluent:RibbonTabItem DataContext="{Binding ViewModels[2]}" Header="Playlists" >
                    <Fluent:RibbonGroupBox Header="Manage" VerticalContentAlignment="Bottom">
                        <Fluent:ComboBox VerticalAlignment="Bottom" Icon="{materialDesign:PackIcon playlistedit}" ItemsSource="{Binding ObservablePlaylistViewModels}" SelectedItem="{Binding SelectedPlaylist}" IsEditable="False">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding TitleWithYoutubeAccountName}"></TextBlock>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="ComboBoxItem">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Visible}" Value="false">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ComboBox.ItemContainerStyle>
                        </Fluent:ComboBox>
                        <Fluent:Button Header="New Playlist" SizeDefinition="Middle,Middle,Small" Icon="{materialDesign:PackIcon playlistplus}" Command="{Binding NewPlaylistCommand}" />
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Update" VerticalContentAlignment="Bottom">
                        <StackPanel Orientation="Horizontal">
                            <Fluent:Button Header="Set Playlists" SizeDefinition="Middle,Middle,Small" Icon="{materialDesign:PackIcon PlaylistCheck}"  Command="{Binding AutoSetPlaylistsCommand}"  IsEnabled="{Binding AutoSettingPlaylists, Converter={converters:InvertBooleanConverter}}" />
                            <materialDesign:PackIcon Kind="HelpCircleOutline" VerticalAlignment="Bottom" Margin="0 5 10 5" ToolTip="Sets playlists to published videos, if the playlist was configured to be set after publication and not at upload time in template." ToolTipService.ShowDuration="60000" Background="Transparent" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Fluent:CheckBox Margin="3 0 3 0" IsChecked="{Binding AutoSetPlaylists}">
                                <TextBlock Margin="0 4 0 0">Auto Set Playlists</TextBlock>
                            </Fluent:CheckBox>
                            <materialDesign:PackIcon Kind="HelpCircleOutline" VerticalAlignment="Bottom" Margin="0 5 10 5" ToolTip="If checked, playlists will be set to published videos automatically every 12 hours when app is running. Will be done at app start, if last attempt is longer ago than 12 hours." ToolTipService.ShowDuration="60000" Background="Transparent" />
                        </StackPanel>
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
                <Fluent:RibbonTabItem DataContext="{Binding ViewModels[3]}" Header="Settings">
                    <Fluent:RibbonGroupBox Header="Manage YT Accounts" VerticalContentAlignment="Bottom">
                        <Fluent:ComboBox VerticalAlignment="Bottom" Icon="{materialDesign:PackIcon AccountEdit}" ItemsSource="{Binding ObservableYoutubeAccountViewModels}" SelectedItem="{Binding SelectedYoutubeAccount}" DisplayMemberPath="YoutubeAccountName" IsEditable="False" />
                        <Fluent:Button Header="New Youtube Account" SizeDefinition="Middle,Middle,Small" Icon="{materialDesign:PackIcon AccountPlus}" Command="{Binding NewYoutubeAccountCommand}" />
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
                <Fluent:RibbonTabItem DataContext="{Binding ViewModels[4]}" Header="VidUp" >
                    <Fluent:RibbonGroupBox Header="Support">
                        <Fluent:Button Header="Donate" SizeDefinition="Large,Middle,Small" LargeIcon="{materialDesign:PackIcon Handshake, 36}" Icon="{materialDesign:PackIcon Handshake}" Command="{Binding DonateCommand}" />
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="About">
                        <Fluent:Button Header="About" SizeDefinition="Middle,Middle,Small" Icon="{materialDesign:PackIcon InformationOutline}"  Command="{Binding AboutCommand}" />
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
            </Fluent:Ribbon>

            <Grid Grid.Row="1">
                <ContentControl VerticalAlignment="Top"  HorizontalAlignment="Left" Content="{Binding CurrentViewModel}" />
            </Grid>

            <StackPanel Grid.Row="2" Orientation="Vertical">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0" Orientation="Horizontal">
                        <Label Content="App Status: " />
                        <Label Content="{Binding AppStatus, Mode=OneWay}" />
                        <Label Content="  |  " />
                        <Label Content="YT Account: " />
                        <ComboBox ItemsSource="{Binding ObservableYoutubeAccountViewModelsInclAll}" SelectedItem="{Binding SelectedYoutubeAccount}" DisplayMemberPath="YoutubeAccountName" Width="125"  Padding="0" />
                        <materialDesign:PackIcon Kind="HelpCircleOutline" VerticalAlignment="Top" Margin="10 4 0 0" ToolTip="Filters view to selected account and is default account for operation whithout account context, e.g. creatin new templates or getting playlists." ToolTipService.ShowDuration="60000" Background="Transparent" />
                        <Label Content="  |  " />
                        <Label Content="Post Upload Action: " />
                        <ComboBox  ItemsSource="{Binding PostUploadActions}" SelectedItem="{Binding PostUploadAction}" Width="125"  Padding="0">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={converters:EnumConverter}}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        <materialDesign:PackIcon Kind="HelpCircleOutline" VerticalAlignment="Top" Margin="10 4 0 0" ToolTip="Action performed after all uploads are finished." ToolTipService.ShowDuration="60000" Background="Transparent" />
                        <Label Content="  |  " />
                        <CheckBox IsChecked="{Binding PostponePostUploadAction}" />
                        <Label Content="Postpone PUA on process:" />
                        <TextBox Text="{Binding PostponePostUploadActionProcessName, UpdateSourceTrigger=PropertyChanged, Delay=500}" Width="150" />
                        <materialDesign:PackIcon Kind="HelpCircleOutline" VerticalAlignment="Top" Margin="10 4 0 0" ToolTip="Postpones post upload action until process doesn't exist/app of this process is closed. Check for process runs every 5 minutes." ToolTipService.ShowDuration="60000" Background="Transparent" />
                        <Label Content="  |  " />
                        <Label Content="Max Upload: " />
                        <TextBox Text="{Binding MaxUploadInKiloBytesPerSecond, UpdateSourceTrigger=PropertyChanged, Delay=500}" Width="70" />
                        <materialDesign:PackIcon Kind="HelpCircleOutline" VerticalAlignment="Top" Margin="10 4 0 0" ToolTip="Set maximum upload bandwidth in kByte/s. Minimum value is 32, everything below is set to 0 which means no upload bandwidth limit." ToolTipService.ShowDuration="60000" Background="Transparent" />
                    </StackPanel>
                    <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="right" >
                        <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}" Value="35" IsIndeterminate="True" Visibility="{Binding AutoSettingPlaylists, Mode=OneWay, Converter={converters:BoolTrueVisibilityConverter}}" />
                        <materialDesign:PackIcon Kind="PlaylistCheck" VerticalAlignment="Top" Margin="10 4 3 0" ToolTip="{Binding AutoSettingPlaylistsText, Mode=OneWay}" ToolTipService.ShowDuration="60000" Background="Transparent" Foreground="{Binding AutoSettingPlaylistsColor, Mode=OneWay}"/>
                    </StackPanel>
                </Grid>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0" Orientation="Horizontal">
                        <Label Content="Current File Progress: " />
                        <Label Content="{Binding CurrentFilePercent, Mode=OneWay}" />
                        <Label Content="  |  " />
                        <Label Content="Current File Time Left: " />
                        <Label Content="{Binding CurrentFileTimeLeft, Mode=OneWay}" />
                        <Label Content="  |  " />
                        <Label Content="Current File MB left: " />
                        <Label Content="{Binding CurrentFileMbLeft, Mode=OneWay}" />
                        <Label Content="  |  " />
                        <Label Content="Current Upload Speed (kBytes/s): " />
                        <Label Content="{Binding CurrentUploadSpeedInKiloBytesPerSecond, Mode=OneWay}" />
                    </StackPanel>
                    <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="right">
                        <Label Content="Total Time Left: " />
                        <Label Content="{Binding TotalTimeLeft, Mode=OneWay}" />
                        <Label Content="  |  " />
                        <Label Content="Total MB Left: " />
                        <Label Content="{Binding TotalMbLeft, Mode=OneWay}" />
                    </StackPanel>
                </Grid>
            </StackPanel>
        </Grid>
    </materialDesign:DialogHost>

</Fluent:RibbonWindow>
